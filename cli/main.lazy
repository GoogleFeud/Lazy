
#native("./path/to/shared/library")

struct Person {
    name: str
    age: f32
    hobby: str?

    age_up: fn(inc: [i32]) {
        self.age += inc;
    }

}

#SmartEnum(+, -, 123)
enum AnimalTypes {
    Dog,
    Cat,
    Fish,
    Bird
}

struct Animal {
    name: str
    age: i8
    t_type: AnimalTypes
}

type ThingWithName = {name: str}

main {
    [1, 2, 3, 40];
    a[1][2][3].abc.3;
    `Hello \${yield 1}! ${a[1][2][3].abc.3}!`;
    let me = new Person { name: "Google", age: ..19 };
    me.hobby?;
    let {name, age} = new Animal { name: "Baby", age: 1, t_type: AnimalTypes::Bird };

    let things = new Vec<ThingWithName> {};
    things.push(me);
    things.push(my_pet);

    for thing in things {
        print(thing.name);
    }

    print(1 >>> 10 << 3,  ~c).abc;

    a.1.2.3.4;

match my_num {
    Number::Float => print("Found float ", my_num),
    Number::Int => print("Found integer ", my_num),

    // Specific cases
    Number::Float(3.14) => print("Found pi!"),

    // Guards
    Number::Int when my_num > 10 => print("Found integer bigger than 10"),

    // Execute the same body for different expressions
    Number::Int(3) | Number::Float(3.1) => print("Number is ", my_num),

    // Acts as an "else" - only executed when nothing above gets matched
    _ => print("Weird...")
}
}