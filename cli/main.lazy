
type Queue<T> = {
    enqueue: (e: T) -> i32,
    dequeue: () -> T,
    peek: () -> T
}


impl Queue<T> for Vec<T> {

    enqueue: fn(e: T) -> i32 {
        self.insert(0, e);
        self.length;
    }

    dequeue: fn() -> T {
        self.pop();
    }

    peek: fn() -> T {
        self.get(self.length - 1);
    }

}


main {
    let num_queue = Vec::from<i32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
    num_queue.dequeue(); // 10
    num_queue.dequeue(); // 9
    num_queue.dequeue(); // 8
    num_queue.enqueue(15); // 9
    num_queue.join(", "); // 15, 1, 2, 3, 4, 5, 6, 7, 8
}

