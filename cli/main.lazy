type Add<Other, Output> = {
    add: (other: Other) -> Output
}

static add = fn<Other, Output>(a: Add<Other, Output>!, b: {a: b}!) -> Output {
    a.add(b);
}

struct Token {
    value: char,

    static create: fn(value: char) -> Token {
        new Token { value };
    }

    add: fn(other: Token) -> Token {
       new Token { value: self.value + other.value };
    }
}

main {
    let tok1 = Token::create('a');
    let tok2 = Token::create('b');
    add<Token, Token>(tok1, tok2); // Invalid, because "Token" doesn't explicitly fit `Add`!
}